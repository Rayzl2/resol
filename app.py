from flask import Flask, render_template, redirect, request, url_for
from telebot import types
import threading
import telebot

bot = telebot.TeleBot('6164055128:AAH2Wt6rMSA8QpXMuRWtWSu-2v792eNG4gw')
bot_notice = telebot.TeleBot('6082532435:AAGM1fn49L7e82dzEjZHfVu67GUTWx1U5yk')
application = Flask(__name__)


@application.route('/')
def index():
    data=[
    { "h1": open("texts/h1-home.txt").read(),
    "p": open("texts/p-home.txt").read(),
    
    }, { "p": open("texts/history-p.txt").read(),

    },
    ]
    return render_template('index.html', data=data)

@application.route('/request',methods = ['POST', 'GET'])
def requesting():
    if request.method == 'POST':
        name = request.form['name']
        message = request.form['message']
        email = request.form['email']
        notice(name, message, email)

        return redirect(url_for('index'), 301)



# TELEGRAM SERVER PART

def notice(name, m, email):
    bot_notice.send_message(1293788323, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! üìù\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {m}\n–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {email}')
    bot_notice.send_message(122167541, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! üìù\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {m}\n–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {email}')


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç üìù")
    back = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ üìä")
    markup.add(btn1, back)
    bot.register_next_step_handler(bot.send_message(message.chat.id, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Resol\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', reply_markup=markup), selector)


def selector(message):
    if message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç üìù':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ì–ª–∞–≤–Ω–∞—è")
        back = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è")
        back1 = types.KeyboardButton("–ù–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è")
        back2 = types.KeyboardButton("–í—ã–±–æ—Ä")
        back3 = types.KeyboardButton("–ö–ª–∏–µ–Ω—Ç—ã")
        back4 = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏")
        back5 = types.KeyboardButton("–°–≤—è–∑—å")
        back6 = types.KeyboardButton("–ù–∞–∑–∞–¥")


        markup.add(btn1, back, back1, back2, back3, back4, back5, back6)
        bot.register_next_step_handler(bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å! üóÇ', reply_markup=markup), selector)

    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ üìä':
        bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã ‚öôÔ∏è')


    elif message.text == '–ì–ª–∞–≤–Ω–∞—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–¢–µ–∫—Å—Ç - H1")
        back = types.KeyboardButton("–¢–µ–∫—Å—Ç - p")
        back1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1, back, back1)

        bot.register_next_step_handler(bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup), home)


    elif message.text == '–ò—Å—Ç–æ—Ä–∏—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton("–¢–µ–∫—Å—Ç - p")
        back1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(back, back1)

        bot.register_next_step_handler(bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup), history)

# HOME SECTION

def home(message):
    if message.text == '–¢–µ–∫—Å—Ç - H1':
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–π—Ç–µ:' + open("texts/h1-home.txt").read())
        bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç'), home_h1)

    elif message.text == '–¢–µ–∫—Å—Ç - p':
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–π—Ç–µ:' + open("texts/p-home.txt").read())
        bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç'), home_p)

def home_h1(message):
    with open('texts/h1-home.txt', 'w') as file:
            file.write(message.text)

    bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç.\nhttps://resol.im')

def home_p(message):
    with open('texts/p-home.txt', 'w') as file:
            file.write(message.text)

    bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç.\nhttps://resol.im')

def bot_start():
    bot.polling()


# HOME SECTION - END


# HISTORY SECTION

def history(message):

    if message.text == '–¢–µ–∫—Å—Ç - p':
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–π—Ç–µ:' + open("texts/history-p.txt").read())
        bot.register_next_step_handler(bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç'), history_p)


def history_p(message):
    with open('texts/history-p.txt', 'w') as file:
            file.write(message.text)

    bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç.\nhttps://resol.im')

threading.Thread(target=bot_start).start()
application.run(debug=True, threaded=True, host='0.0.0.0')
